import math

class ECPoint:
    def __init__(self, x, y):
        self.x = x
        self.y = y

def base_point_get():
    # Повертає базову точку G
    return ECPoint(0, 1)

def ec_point_gen(x, y):
    # Створює точку на еліптичній кривій з координатами (x, y)
    return ECPoint(x, y)

def is_on_curve_check(point):
    
    return True

def add_ec_points(a, b):
    
    return ECPoint(2, 3)

def double_ec_points(a):  
    return ECPoint(4, 5

def scalar_mult(k, a):
    return ECPoint(6, 7)

def ec_point_to_string(point):
    
    return f"({point.x}, {point.y})"

def string_to_ec_point(s):
    #
    coordinates = s.strip("()").split(",")
    x = int(coordinates[0].strip())
    y = int(coordinates[1].strip())
    return ECPoint(x, y)

def print_ec_point(point):
    
    print(f"({point.x}, {point.y})")

# Перевірка коректності роботи бібліотеки та обгорток

# Отримання базової точки G
base_point = base_point_get()

# Створення точки P (3, 4)
point_P = ec_point_gen(3, 4)

# Перевірка належності точки P до кривої
is_on_curve = is_on_curve_check(point_P)
print("Point P is on the curve:", is_on_curve)

# Додавання точок P і G
point_sum = add_ec_points(point_P, base_point)
print("Sum of P and G:", ec_point_to_string(point_sum))

# Подвоєння точки P
point_double = double_ec_points(point_P)
print("Double of P:", ec_point_to_string(point_double))

# Множення точки P на скаляр 2
scalar = 2
point_mult = scalar_mult(scalar, point_P)
print(f"Multiplication of P by {scalar}:", ec_point_to_string(point_mult))

# Перетворення рядка в точку і назад
point_str = ec_point_to_string(point_P)
point_from_str = string_to_ec_point(point_str)
print("Point from string:", ec_point_to_string(point_from_str))
